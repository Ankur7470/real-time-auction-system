pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'auction-system-frontend'
        DOCKER_IMAGE_NAMESPACE = 'ankur2k19'
        DOCKER_IMAGE_TAG = 'latest'
        GITHUB_REPO_URL = 'https://github.com/Ankur7470/real-time-auction-system.git'
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
    }

    triggers {
        githubPush()
    }

    tools {
        sonarScanner 'SonarQubeScanner'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: "${GITHUB_REPO_URL}"
            }
        }

        stage('Detect Frontend Changes') {
            steps {
                script {
                    def previousCommit = sh(script: "git rev-parse HEAD~1", returnStdout: true).trim()
                    def changes = sh(
                        script: "git diff --name-only ${previousCommit} HEAD | grep '^frontend/' || true",
                        returnStdout: true
                    ).trim()

                    if (changes == "") {
                        echo "No changes in frontend folder. Skipping the pipeline."
                        currentBuild.description = "No frontend changes"
                        currentBuild.result = 'NOT_BUILT'
                        error("No frontend changes")
                    } else {
                        echo "Changes detected in frontend folder. Proceeding with build."
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('frontend') {
                    withSonarQubeEnv('SonarQubeServer') {
                        sh "${tool 'SonarQubeScanner'}/bin/sonar-scanner"
                        // sh 'sonar-scanner'
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                dir('frontend') {
                    script {
                        docker.withRegistry('', 'DockerHubCred') {
                            def image = docker.build("${DOCKER_IMAGE_NAMESPACE}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}", '.')
                            image.push()
                        }
                    }
                }
            }
        }

        stage('Deploy to K8s with Ansible Playbook') {
            steps {
                dir('devops/ansible/frontend') {
                    ansiblePlaybook(
                        playbook: 'ansible_playbook.yml',
                        inventory: 'inventory'
                    )
                }
            }
        }
    }

    post {
        success {
            echo 'Frontend pipeline completed successfully.'
        }
        failure {
            echo 'Frontend pipeline failed.'
        }
        aborted {
            echo 'Frontend pipeline was aborted.'
        }
        notBuilt {
            echo 'Frontend pipeline skipped as there were no changes in the frontend.'
        }
        always {
            echo 'Frontend pipeline finished execution.'
        }
    }
}
