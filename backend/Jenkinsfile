pipeline {
    agent any

     environment {
        DOCKER_IMAGE_NAMESPACE = 'ankur2k19'
        VAULT_PASSWORD_FILE = 'ansible/vault_pass.txt'
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
    }

    triggers {
        githubPush()
    }

    tools {
        maven 'Maven 3.9.9'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Ankur7470/real-time-auction-system.git'
            }
        }

        stage('Detecting Backend Changes') {
            steps {
                script {
                    def changes = sh(
                        script: "git diff --name-only HEAD~1 HEAD | grep '^backend/' || true",
                        returnStdout: true
                    ).trim()
                    // def changes = sh(script: "git diff --name-only HEAD~1 HEAD | grep '^backend/' || true", returnStdout: true).trim()
                     if (changes == "") {
                        echo "No changes in frontend folder. Skipping the pipeline."
                        currentBuild.description = "No backendend changes"
                        // Set build result to NOT_BUILT and exit without error
                        currentBuild.result = 'NOT_BUILT'
                        // Use `return` to exit cleanly instead of throwing an error
                        return
                    } else {
                        echo "Changes detected in backend folder. Proceeding with build."
                    }
                }
            }
        }

stage('Build Backend Projects') {
            steps {
                script {
                    def services = ['eureka-server', 'api-gateway', 'auth-service', 'auction-service', 'bidding-service']
                    for (service in services) {
                        dir("backend/${service}") {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def services = ['eureka-server', 'api-gateway', 'auth-service', 'auction-service', 'bidding-service']
                    for (service in services) {
                        dir("backend/${service}") {
                            docker.build("${DOCKER_IMAGE_NAMESPACE}/${service}")
                        }
                    }
                }
            }
        }
//
        stage('Push Docker Images') {
            steps {
                script {
                    def services = ['eureka-server', 'api-gateway', 'auth-service', 'auction-service', 'bidding-service']
                    docker.withRegistry('', 'DockerHubCred') {
                        for (service in services) {
                            sh "docker push ${DOCKER_IMAGE_NAMESPACE}/${service}:latest"
                        }
                    }
                }
            }
        }

         stage('Deploy to K8s with Ansible') {
            steps {
                dir('backend') {
                    sh "ansible-playbook -i ansible/inventory ansible/deploy.yml --vault-password-file ${VAULT_PASSWORD_FILE}"
                }
            }
        }
    }
}
